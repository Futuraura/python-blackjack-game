name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Debug environment
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in current directory:"
          Get-ChildItem
          Write-Host "Python version:"
          python --version

      - name: Build with PyInstaller
        run: |
          Write-Host "Building with PyInstaller..."
          pyinstaller --clean --noconfirm --log-level=DEBUG blackjack_game.spec
          Write-Host "Build completed. Checking dist folder:"
          if (Test-Path "dist") {
            Get-ChildItem dist/
            if (Test-Path "dist/BlackjackGame") {
              Write-Host "BlackjackGame folder contents:"
              Get-ChildItem dist/BlackjackGame/ | Select-Object -First 10
              Write-Host "Checking for custom files:"
              Get-ChildItem "dist/BlackjackGame/_internal" | Where-Object {$_.Name -like "*WezTerm*" -or $_.Name -like "*tcss*" -or $_.Name -like "*blackjack*"}
            } else {
              Write-Host "ERROR: BlackjackGame folder not found"
              exit 1
            }
          } else {
            Write-Host "ERROR: dist folder not created"
            exit 1
          }

      - name: Create release package
        run: |
          if (-not (Test-Path "dist/BlackjackGame/BlackjackGame.exe")) {
            Write-Host "ERROR: BlackjackGame.exe not found!"
            exit 1
          }
          echo '@echo off' > dist/BlackjackGame/run_game.bat
          echo 'title Blackjack Game' >> dist/BlackjackGame/run_game.bat
          echo 'echo Starting Blackjack Game...' >> dist/BlackjackGame/run_game.bat
          echo 'BlackjackGame.exe' >> dist/BlackjackGame/run_game.bat
          echo 'echo.' >> dist/BlackjackGame/run_game.bat
          echo 'echo Game ended. Press any key to close...' >> dist/BlackjackGame/run_game.bat
          echo 'pause >nul' >> dist/BlackjackGame/run_game.bat
          echo 'Blackjack Game - Standalone Version' > dist/BlackjackGame/INSTRUCTIONS.txt
          echo '====================================' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo '' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo 'How to run:' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo '- Double-click "run_game.bat" or "BlackjackGame.exe"' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo '' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo 'All game files and dependencies are included.' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo 'No additional installation required.' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo '' >> dist/BlackjackGame/INSTRUCTIONS.txt
          echo 'Enjoy the game!' >> dist/BlackjackGame/INSTRUCTIONS.txt
          if (Test-Path README.md) { Copy-Item README.md dist/BlackjackGame/ }

      - name: Create ZIP archive
        run: |
          Write-Host "Creating ZIP archive..."
          Compress-Archive -Path "dist/BlackjackGame/*" -DestinationPath "BlackjackGame-Windows-${{ github.event.release.tag_name }}.zip" -Force
          $size = (Get-Item "BlackjackGame-Windows-${{ github.event.release.tag_name }}.zip").Length / 1MB
          Write-Host "ZIP created. Size: $([math]::Round($size, 2)) MB"

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "Uploading release asset..."
          gh release upload ${{ github.event.release.tag_name }} "BlackjackGame-Windows-${{ github.event.release.tag_name }}.zip" --clobber

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          echo "Building with PyInstaller..."
          pyinstaller --clean --noconfirm --log-level=DEBUG blackjack_game.spec
          echo "Build completed. Checking dist folder:"
          ls -la dist/
          if [ -d "dist/BlackjackGame" ]; then
            echo "BlackjackGame folder contents:"
            ls -la dist/BlackjackGame/
          else
            echo "ERROR: BlackjackGame folder not found in dist/"
            exit 1
          fi

      - name: Create release package
        run: |
          if [ ! -f "dist/BlackjackGame/BlackjackGame" ]; then
            echo "ERROR: BlackjackGame executable not found!"
            exit 1
          fi

          cat > dist/BlackjackGame/run_game.sh << 'EOF'
          #!/bin/bash
          echo "Starting Blackjack Game..."
          ./BlackjackGame
          echo "Game ended. Press Enter to close..."
          read
          EOF
          chmod +x dist/BlackjackGame/run_game.sh

          cat > dist/BlackjackGame/INSTRUCTIONS.txt << 'EOF'
          Blackjack Game - Standalone Version
          ====================================

          How to run:
          - Run "./run_game.sh" in terminal or "./BlackjackGame"

          All game files and dependencies are included.
          No additional installation required.

          Enjoy the game!
          EOF

          [ -f README.md ] && cp README.md dist/BlackjackGame/

      - name: Create TAR archive
        run: |
          cd dist
          tar -czf "../BlackjackGame-Linux-${{ github.event.release.tag_name }}.tar.gz" BlackjackGame/
          echo "TAR created. Size: $(du -h "../BlackjackGame-Linux-${{ github.event.release.tag_name }}.tar.gz" | cut -f1)"

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} "BlackjackGame-Linux-${{ github.event.release.tag_name }}.tar.gz" --clobber

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          echo "Building with PyInstaller..."
          pyinstaller --clean --noconfirm --log-level=DEBUG blackjack_game.spec
          echo "Build completed. Checking dist folder:"
          ls -la dist/
          if [ -d "dist/BlackjackGame" ]; then
            echo "BlackjackGame folder contents:"
            ls -la dist/BlackjackGame/
          else
            echo "ERROR: BlackjackGame folder not found in dist/"
            exit 1
          fi

      - name: Create release package
        run: |
          if [ ! -f "dist/BlackjackGame/BlackjackGame" ]; then
            echo "ERROR: BlackjackGame executable not found!"
            exit 1
          fi

          cat > dist/BlackjackGame/run_game.sh << 'EOF'
          #!/bin/bash
          echo "Starting Blackjack Game..."
          ./BlackjackGame
          echo "Game ended. Press Enter to close..."
          read
          EOF
          chmod +x dist/BlackjackGame/run_game.sh

          cat > dist/BlackjackGame/INSTRUCTIONS.txt << 'EOF'
          Blackjack Game - Standalone Version
          ====================================

          How to run:
          - Run "./run_game.sh" in terminal or "./BlackjackGame"

          All game files and dependencies are included.
          No additional installation required.

          Enjoy the game!
          EOF

          [ -f README.md ] && cp README.md dist/BlackjackGame/

      - name: Create ZIP archive
        run: |
          cd dist
          zip -r "../BlackjackGame-macOS-${{ github.event.release.tag_name }}.zip" BlackjackGame/
          echo "ZIP created. Size: $(du -h "../BlackjackGame-macOS-${{ github.event.release.tag_name }}.zip" | cut -f1)"

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} "BlackjackGame-macOS-${{ github.event.release.tag_name }}.zip" --clobber
